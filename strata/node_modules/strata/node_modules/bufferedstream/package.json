{
  "author": {
    "name": "Michael Jackson",
    "email": "mjijackson@gmail.com"
  },
  "name": "bufferedstream",
  "description": "A base stream class for node that reliably buffers until next tick",
  "version": "1.3.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/mjijackson/bufferedstream.git"
  },
  "main": "./buffered-stream.js",
  "scripts": {
    "test": "mocha test"
  },
  "engines": {
    "node": ">=0.4.7"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.5.0"
  },
  "readme": "[![build status](https://secure.travis-ci.org/mjijackson/bufferedstream.png)](http://travis-ci.org/mjijackson/bufferedstream)\n\nBufferedStream is a reliable base class for streams in node programs that buffers data until the next tick of the event loop.\n\n## Rationale\n\nThe details of streams are still being worked out in node core. As of this writing there are several different types of streams in node, including some objects that do not actually inherit from Stream. The goal of this library is to iron out the differences between the various stream-like objects and give user code a reliable, documented API they can use now. If the situation ever improves in node core (which we all hope it will) this code may become obsolete.\n\n## Installation\n\nUsing [npm](http://npmjs.org):\n\n    $ npm install bufferedstream\n\n## Usage\n\nThe key feature of this class is that anything you write to the stream in the current tick of the event loop is buffered until the next tick. This allows you to register event handlers, pause the stream, etc. reliably without losing any data.\n\n```javascript\nvar BufferedStream = require('bufferedstream');\n\nvar stream = new BufferedStream;\nstream.write('Hello ');\nstream.pause();\n\nsetTimeout(function () {\n  stream.write('IHdvcmxkLg==', 'base64');\n  stream.resume();\n  stream.on('data', function (chunk) {\n    console.log(chunk.toString()); // Hello world.\n  });\n}, 10);\n```\n\nThe `BufferedStream` constructor may also accept a \"source\" which may be another stream that will be piped directly through to this stream or a string. This is useful for wrapping various stream-like objects and normalizing their behavior across implementations.\n\nPlease see the source code for more information. The module is small enough (and well-documented) that it should be easy to digest in a quick skim.\n\n## Tests\n\nRun the tests with [mocha](http://visionmedia.github.com/mocha/):\n\n    $ mocha test\n\n## License\n\nCopyright 2012 Michael Jackson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nThe software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and non-infringement. In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.\n",
  "_id": "bufferedstream@1.3.0",
  "dist": {
    "shasum": "616f51da65c16b3d396075c7235cd07a5bb075a0"
  },
  "_from": "bufferedstream@1.3.0"
}
